" ─────────────────────────────────────────────────────────────────────────────┐
"                                                                              │
" Name:    elems/plugins/langs/c_based.vim.tt                                  │
" Summary: Configure plugins related to `c`-based languages                    │
"          (`c` and derivatives).                                              │
"                                                                              │
" Authors:                                                                     │
"   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              │
"                                                                              │
" Project:                                                                     │
"   - Homepage:        https://github.com/alem0lars/configs-vim                │
"   - Getting started: see README.md in the project root folder                │
"                                                                              │
" License: Apache v2.0 (see below)                                             │
"                                                                              │
" ─────────────────────────────────────────────────────────────────────────────┤
"                                                                              │
" Licensed to the Apache Software Foundation (ASF) under one more contributor  │
" license agreements.  See the NOTICE file distributed with this work for      │
" additional information regarding copyright ownership. The ASF licenses this  │
" file to you under the Apache License, Version 2.0 (the "License"); you may   │
" not use this file except in compliance with the License.                     │
" You may obtain a copy of the License at                                      │
"                                                                              │
"   http://www.apache.org/licenses/LICENSE-2.0                                 │
"                                                                              │
" Unless required by applicable law or agreed to in writing, software          │
" distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    │
" WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             │
" See the License for the specific language governing permissions and          │
" limitations under the License.                                               │
"                                                                              │
" ─────────────────────────────────────────────────────────────────────────────┘


" ────────────────────────────────────────────────────────────────── Declare ──┐
function! plugins#langs#c_based#declare() abort
  Plug 'Rip-Rip/clang_complete', {'do': 'make install'}
endfunction
" ─────────────────────────────────────────────────────────────────────────────┘

" ──────────────────────────────────────────────────────────────── Configure ──┐
function! plugins#langs#c_based#configure() abort
  " ─────────────────────────────────────────── `clang_complete` ← Configure ──┤
  " Disable autocomplete using clang_complete because neocomplete will be used.
  let g:clang_complete_auto = 0
  " Disable autoselect of the first element.
  let g:clang_auto_select = 0
  " Disable `omnicppcomplete` compatibility mode.
  let g:clang_omnicppcomplete_compliance=0
  " Instead of calling the clang/clang++ tool use libclang directly. This gives
  " access to many more clang features. Furthermore it automatically caches all
  " includes in memory.
  " Updates after changes in the same file will therefore be a lot faster.
  let g:clang_use_library=1
  <% if is_osx? %>
  let s:clang_library_path='/Library/Developer/CommandLineTools/usr/lib'
  if isdirectory(s:clang_library_path)
    let g:clang_library_path = s:clang_library_path
  endif
  <% end %>
  " ─────────────────────────────────────────────────────── Fold ← Configure ──┤
  autocmd FileType c      setlocal foldmethod=syntax
  autocmd FileType cpp    setlocal foldmethod=syntax
  autocmd FileType objc   setlocal foldmethod=syntax
  autocmd FileType objcpp setlocal foldmethod=syntax
  " ──────────────────────────────────────────────────── Hotkeys ← Configure ──┤
  " Disable default keymapping.
  let g:clang_make_default_keymappings=0
  " ────────────────────────────────────────── Vim-Kind-specific ← Configure ──┤
  <% if has_feature? :vanilla %>
  call s:configure_vanilla()
  <% end %>
  <% if has_feature? :neovim %>
  call s:configure_neovim()
  <% end %>
endfunction
" ────────────────────────────────────────────────────── Vanilla ← Configure ──┤
function! s:configure_vanilla() abort
  " ──────────────────────────────────── `neocomplete` ← Vanilla ← Configure ──┤
  " Set source.
  let g:neocomplete#force_omni_input_patterns.c =
        \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
  let g:neocomplete#force_omni_input_patterns.cpp =
        \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  let g:neocomplete#force_omni_input_patterns.objc =
        \ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
  let g:neocomplete#force_omni_input_patterns.objcpp =
        \ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)\|\h\w*::\w*'
endfunction
" ─────────────────────────────────────────────────────── NeoVim ← Configure ──┤
function! s:configure_neovim() abort
endfunction
" ─────────────────────────────────────────────────────────────────────────────┘


" vim: set filetype=eruby.vim :
